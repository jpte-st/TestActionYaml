name: Yest FE build

env:
  secret_keys: "ACR-PASSWORD DEV-MONGO-URI"

on:
  release:
    types: [published]

# Push 시 체크 필요 시
#  push:
#    branches: [ main ]

## 수동 실행
  workflow_dispatch:
    inputs:
      token:
        description: 'The GitHub token to use for downloading the action, defaults to workflow token'
        required: true
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Set JSON string
        run: echo 'JSON_STRING={"server":"prod","version":"1.2.3","build":"456"}' >> $GITHUB_ENV

      - name: Convert JSON keys to env variables
        run: |
          for key in $(echo $JSON_STRING | jq -r 'keys[]'); do
            value=$(echo $JSON_STRING | jq -r ".\"$key\"")
            echo "$key=$value"
          done

      - name: Print Array ENV
        run: |
          echo "${{ env.secret_keys }}"
          secret_keys=(${{ env.secret_keys }})
          for key in ${secret_keys[@]}; do
            echo "$key"
          done
#
#    steps:
#      - name: 🛎️ Checkout code
#        uses: actions/checkout@v4
#
#      - name: 💾 Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20'
#
#      - name: 📥 Install dependencies
#        run: npm install
#
#      - name: 🏗️ Build
#        run: npm run build
#
#      - name: 📦 Archive production artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: dist-without-markdown
#          path: |
#            dist
#            !dist/**/*.md
#
## 백엔드 Repository에 배포
#
#      - name: Deploy to external repository
#        uses: cpina/github-action-push-to-another-repository@main
#        env:
#          # 🏗️ <internal repository>, run GitHub Action.
#          # 🎁 <external repository>, receiving Artifacts.
#          #
#          # Way 1: using Personal Access Token
#          # @see https://cpina.github.io/push-to-another-repository-docs/setup-using-personal-access-token.html#setup-personal-access-token
#          # 1.1 Generate Personal Access Token: <external repository>/<Avatar>/Settings/Developer settings/Personal access tokens/Generate new token
#          #     Select `No expiration` and Check `✅️ repo    Full control of private repositories`, Generate and then Copy the Token
#          # 1.2 Then make the token available to the GitHub Action: <internal repository>/Settings/Secrets/Actions/New repository secret
#          #     Name: EXTERNAL_REPOSITORY_PERSONAL_ACCESS_TOKEN, Value Paste the Token
#          API_TOKEN_GITHUB: ${{ inputs.token }}
#          # Way 2: using SSH deploy keys
#          # @see https://cpina.github.io/push-to-another-repository-docs/setup-using-ssh-deploy-keys.html#setup-ssh-deploy-keys
#          # 2.1 Generate an SSH key in terminal (Leave the passphrase empty)
#          # 2.2 Add public key in the external repository: <external repository>/Settings/Deploy keys/Add deploy key
#          #     Name: DEPLOY_PUBLIC_KEY, Value Paste the public key. Enable "✅️ Allow write access"
#          # 2.3 Add private key in the source repository: <external repository>/Settings/Secrets/Actions/New repository secret
#          #     Name: DEPLOY_PRIVATE_KEY, Value Paste the private key.
#          # SSH_DEPLOY_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
#
#        with:
#          # GitHub Action output files
#          source-directory: dist/
#          target-directory: dist/
#          destination-github-username: jpjp84
#          destination-repository-name: Acon
#          user-email: jpjp8414@gmail.com
#          # It defaults to `main`
#          target-branch: "main"
#

#
#      - name: 🚀 Deploy
#        uses: s0/git-publish-subdir-action@develop
#        env:
#          REPO: git@github.com:jpjp84/Acon.git
#          BRANCH: main
#          FOLDER: dist
#          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}

# 커버리지 파일 생성
#      - name: Archive code coverage results
#        uses: actions/upload-artifact@v4
#        with:
#          name: code-coverage-report
#          path: output/test/code-coverage.html

# Github Page 배포용(storybook)
#      - name: 🚀Deploy to GitHub Pages🚀
#        uses: JamesIves/github-pages-deploy-action@4.1.5
#        with:
#          branch: gh-pages
#          folder: public

# 백엔드 Repository에 배포
#      - name: Deploy
#        uses: s0/git-publish-subdir-action@develop
#        env:
#          REPO: self
#          BRANCH: gh-pages
#          FOLDER: public/site
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}